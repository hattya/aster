var os = require('os');
var path = require('path');
var go_ = require('language/go');
var dep = go_.dep;
var go = go_.go;

var proj = path.basename(os.getwd());
var title = 'Aster â˜† ' + proj;

aster.title(title);
aster.ignore.push(/^node_modules$/);
aster.ignore.push(/^vendor(?:\.orig)?$/);

// js
aster.watch(/.+\.js$/, function() {
  go.generate('./...');
});

// go
aster.watch(/.+\.go$/, function(files) {
  if (files.some(function(e) { return e === 'aster.go'; })) {
    if (go.generate('./...')) return;
  }
  if (go.get('-t', '-v', './...')) return;
  if (go.vet('./...')) return;
  // go test for each package
  var bad = go_.packagesOf(files).some(function(p) {
    var rv = go.test('-v', '-race', '-covermode', 'atomic', '-coverprofile', p + '/cover.out', p);
    aster.title(title);
    return rv;
  });
  // combine coverage profiles
  if (!bad) {
    var out = go_.combine({ profile: 'cover.out', out: 'cover.all.out', packages: ['./...'] });
    go.tool.cover('-func', out);
    go.tool.cover('-html', out, '-o', 'coverage.html');
    os.remove(out);
  }
});

aster.watch(/^Gopkg\.(?:lock|toml)$/, function() {
  if (os.stat('vendor')) {
    dep.ensure('-v');
  }
});

// rst
aster.watch(/.+\.rst$/, function(files) {
  files.forEach(rst2html);
});

function rst2html(rst) {
  var rst2html;
  var ok = ['rst2html.py', 'rst2html'].some(function(s) {
    rst2html = s;
    return os.whence(rst2html);
  });
  if (!ok) {
    return true;
  }
  var rv = system([rst2html, '--strict', rst, rst.slice(0, -4) + '.html']);
  if (!rv) {
    aster.notify('success', proj + ': rst2html', rst);
  } else {
    aster.notify('failure', proj + ': rst2html', rst + ' failed');
  }
  return rv;
}

// system
function system(args) {
  console.log('+ ' + args.join(' '));
  return os.system(args);
}
