var os = require('os');
var path = require('path');
var go_ = require('language/go');
var dep = go_.dep;
var go = go_.go;
var npm = require('language/javascript').npm;
var rst2html = require('language/restructuredtext').rst2html;

var title = 'Aster â˜† ' + path.basename(os.getwd());

aster.title(title);
aster.ignore.push(/^node_modules$/);
aster.ignore.push(/^vendor(?:\.orig)?$/);

// js
aster.watch(/.+\.js$/, function() {
  try {
    if (npm.run('lint')) return;
  } finally {
    aster.title(title);
  }
  if (go.generate('./...')) return;
});

aster.watch(/^package\.json$/, function(files) {
  npm.install();
  aster.title(title);
});

// go
aster.watch(/.+\.go$/, function(files) {
  if (files.some(function(e) { return e === 'aster.go'; })) {
    if (go.generate('./...')) return;
  }
  if (go.get('-t', '-v', './...')) return;
  if (go.vet('./...')) return;
  // go test for each package
  var bad = go_.packagesOf(files).some(function(p) {
    try {
      return go.test('-v', '-race', '-covermode', 'atomic', '-coverprofile', p + '/cover.out', p);
    } finally {
      aster.title(title);
    }
  });
  // combine coverage profiles
  if (!bad) {
    var out = go_.combine({ profile: 'cover.out', out: 'cover.all.out', packages: ['./...'] });
    go.tool.cover('-func', out);
    go.tool.cover('-html', out, '-o', 'coverage.html');
    os.remove(out);
  }
});

aster.watch(/^Gopkg\.(?:lock|toml)$/, function() {
  if (os.stat('vendor')) {
    dep.ensure('-v');
  }
});

// rst
aster.watch(/.+\.rst$/, function(files) {
  files.some(function(rst) { return rst2html({ options: ['--strict'], src: rst }); });
});
